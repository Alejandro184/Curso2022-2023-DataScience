# -*- coding: utf-8 -*-
"""Copia de Task07.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lz4zFy5ma8GUJ0XHjZJaj-f7ja2yZJhy

**Task 07: Querying RDF(s)**
"""

# !pip install rdflib 
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2021-2022/master/Assignment4/course_materials"

"""Leemos el fichero RDF de la forma que lo hemos venido haciendo"""
from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage+"/rdf/example6.rdf", format="xml")

"""**TASK 7.1: List all subclasses of "Person" with RDFLib and SPARQL**"""

from rdflib.plugins.sparql import prepareQuery
ns = Namespace("http://somewhere#")

# TO DO

# RDFLib
def rec_subclasses(className):
  for s, p, o in g.triples((None, RDFS.subClassOf, className)):
    if s:
      if rec_subclasses(s):
        return [s] + [rec_subclasses(s)]
      else:
        return [s]

print(rec_subclasses(ns.Person))

print(" ")

# SPARQL
q1 = prepareQuery('''
SELECT DISTINCT ?subclass
WHERE{
?subclass rdfs:subClassOf* <http://somewhere#Person>.
}
''')

for r in g.query(q1):
  print(r)

"""**TASK 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)**

"""

# TO DO

#RDFLib
def rec_InstancesOfClassAndSubclasses(className, list_individuals=[]):
  for s, p, o in g.triples((None, RDFS.subClassOf, className)):
    rec_InstancesOfClassAndSubclasses(s, list_individuals)
  for s, p, o in g.triples((None, RDF.type, className)):
    list_individuals += [s]
  return list_individuals

instances = rec_InstancesOfClassAndSubclasses(ns.Person)
for elem in instances:
  print(elem)

print(" ")

# SPARQL
q2 = prepareQuery('''
SELECT DISTINCT ?person
WHERE {
  ?subclass rdfs:subClassOf* <http://somewhere#Person>.
  ?person rdf:type ?subclass
}
''')

for r in g.query(q2):
  print(r)

"""**TASK 7.3: List all individuals of "Person" and all their properties including their class with RDFLib and SPARQL**

"""

# TO DO

# RDFLib
def rec_IndividualsAndProperties(className):
  for instance in rec_InstancesOfClassAndSubclasses(className, []):
    for s, p, o in g.triples((instance, None, None)):
      print(instance, p, o)

rec_IndividualsAndProperties(ns.Person)

print(" ")

# SPARQL
q2 = prepareQuery('''
SELECT DISTINCT ?person ?property ?x
WHERE {
  ?subclass rdfs:subClassOf* <http://somewhere#Person>.
  ?person rdf:type ?subclass.
  ?person ?property ?x
}
''')


for s,p,o in g.query(q2):
  print(s,p,o)
