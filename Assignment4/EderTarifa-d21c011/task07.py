# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colaboratory.

Original file is located at
<<<<<<< HEAD
    https://colab.research.google.com/drive/1TtS8cum32KQRb6neG3aLVBpt9J4_LFrw
=======
    https://colab.research.google.com/github/FacultadInformatica-LinkedData/Curso2022-2023-DataScience/blob/master/Assignment4/course_materials/notebooks/Task07.ipynb
#>>>>>>> adc606407a12d11f354d5b7f5ada676dd4a9205e

**Task 07: Querying RDF(s)**
"""
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2021-2022/master/Assignment4/course_materials"

"""Leemos el fichero RDF de la forma que lo hemos venido haciendo"""

from rdflib import Graph, Namespace
from rdflib.namespace import RDF, RDFS
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage+"/rdf/example6.rdf", format="xml")

"""**TASK 7.1: List all subclasses of "Person" with RDFLib and SPARQL**"""
# TO DO
from rdflib.plugins.sparql import prepareQuery

ns = Namespace("http://somewhere#")

q1 = prepareQuery('''
  SELECT ?Subclass WHERE { 
    ?Subclass RDFS:subClassOf/RDFS:subClassOf* ns:Person.
  }
  ''',
                  initNs={"RDFS": RDFS, "ns": ns}
                  )
# Visualize the results

#SPARQL
for r in g.query(q1):
  print(r.Subclass)

#RDFLib
subclass_of_person = []
for s, p, o in g.triples((None, RDFS.subClassOf, ns.Person)):
    print(s)
    subclass_of_person.append(s)
print(g.value(None, RDFS.subClassOf, s))


"""**TASK 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)**

"""
# TO DO
for s1,p1,o1 in g.triples((None, RDF.type, ns.Person)):
  print(s1)

for s1,p1,o1 in g.triples((None, RDFS.subClassOf, ns.Person)):
  for s2,p2,o2 in g.triples((None, RDF.type, s1)):
    print(s2)

q2 = prepareQuery('''
  SELECT 
    ?x
  WHERE { 
    { 
      ?x rdf:type ns:Person. 
    } UNION {
      ?y rdfs:subClassOf ns:Person.
      ?x rdf:type ?y
    }
  }
  ''',
  initNs = { "rdfs": RDFS,"rdf": RDF, "ns": ns}
)

for t2 in g.query(q2):
  print(t2)

"""**TASK 7.3: List all individuals of "Person" and all their properties including their class with RDFLib and SPARQL**

"""
# TO DO
syntax = Namespace('http://www.w3.org/1999/02/22-rdf-syntax-ns#')
q3 = prepareQuery('''
SELECT * WHERE{
  ?Person syntax:type <http://somewhere#Person>.
  ?Person ?P ?O
  }
''',
  initNs= { 'syntax': syntax }
)
# Visualize the results

for r in g.query(q3):
  print(r.Person, r.P, r.O)
# Visualize the results
for s1,p1,o1 in g.triples((None, RDF.type, ns.Person)):
  for s2,p2,o2 in g.triples((s1, None, None)):
    print(s2,p2,o2)

for s1,p1,o1 in g.triples((None, RDFS.subClassOf, ns.Person)):
  for s2,p2,o2 in g.triples((None, RDF.type, s1)):
    for s3,p3,o3 in g.triples((s1, None, None)):
      print(s3,p3,o3)

q3 = prepareQuery('''
  SELECT 
    ?x ?Property ?z
  WHERE { 
    {
    ?x rdf:type ns:Person.
    ?x ?Property ?z
  } UNION {
    ?x rdf:type ?y.
    ?x ?Property ?z.
    ?y rdfs:subClassOf ns:Person
    } 
  }
  ''',
  initNs = { "rdfs": RDFS, "ns":ns, "rdf":RDF}
)

for t3 in g.query(q3):
  print(t3)
