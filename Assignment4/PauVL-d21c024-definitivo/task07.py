# -*- coding: utf-8 -*-
"""Copia de Task07.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1P8fNozqnrmPc2GAzQdtx9ooZadN3CTPu

**Task 07: Querying RDF(s)**
"""

#!pip install rdflib
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2021-2022/master/Assignment4/course_materials"

"""Leemos el fichero RDF de la forma que lo hemos venido haciendo"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage+"/rdf/example6.rdf", format="xml")

"""**TASK 7.1: List all subclasses of "Person" with RDFLib and SPARQL**"""

print("List all subclasses of \"Person\" with RDFLib and SPARQL")

# Aunque se pedía sacar solo el primer nivel de subclase, yo he listado además todas las subclasaes de Person indepentemente de su nivel de subclase.

#TASK 7.1: List all subclasses of "Person" with RDFLib and SPARQL
print("7.1 RDFLib: ")
NS = Namespace("http://somewhere#")
def subclases(objeto: str) -> None:
  tripletaResult = g.triples((None, RDFS.subClassOf, objeto))
  if tripletaResult is not None:
    for s, p, o in tripletaResult:
      print(s)
      subclases(s)

#Función recursiva para buscar las subclases
subclases(NS.Person)

print("7.1 SPARQL: ")
#SPARQL
from rdflib.plugins.sparql import prepareQuery

q1 = prepareQuery('''
  SELECT ?Subclase WHERE { 
    ?Subclase rdfs:subClassOf+ ns:Person. 
  }
  ''',
  initNs = { "rdfs": RDFS, "ns": NS}
)

for r in g.query(q1):
  print(r.Subclase)
print("FIN 7.1")

"""**TASK 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)**

"""

print("List all individuals of \"Person\" with RDFLib and SPARQL (remember the subClasses)")
#TASK 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)
print("7.2 RDFLib: ")

def individuos(objeto: str) -> None:
  i = g.triples((None, RDF.type, objeto))
  if i is not None:
    for sPadre, pPadre, oPadre in i:
      print(sPadre)
  sc = g.triples((None, RDFS.subClassOf, objeto))
  if sc is not None:
    for sHijo, pHijo, oHijo in sc:
      individuos(sHijo)
#Llamada recursiva para sacar todos los individuos independientemente del nivel de herencia.
individuos(NS.Person)


print("7.2 SPARQL: ")
VCARD = Namespace("http://somewhere#http://www.w3.org/2001/vcard-rdf/3.0/")
q2 = prepareQuery('''
  SELECT ?X WHERE {
    ?Subclase rdfs:subClassOf* ns:Person. 
    ?X rdf:type ?Subclase.
  }
  ''',
  initNs = { "rdfs": RDFS, "ns": NS, "vcard": VCARD, "rdf": RDF,}
)


for r in g.query(q2):
  print(r.X)
print("FIN 7.2")

"""**TASK 7.3: List all individuals of "Person" and all their properties including their class with RDFLib and SPARQL**

"""

print("List all individuals of \"Person\" and all their properties including their class with RDFLib and SPARQL")
#TASK 7.3: List all individuals of "Person" and all their properties including their class with RDFLib and SPARQL
print("7.3 RDFLib: ")

def individuosYPropiedades(objeto: str) -> None:
  i = g.triples((None, RDF.type, objeto))
  if i is not None:
    for sPadre, pPadre, oPadre in i:
      propiedades = g.triples((sPadre, None, None))
      if propiedades is not None:
        for s, p, o in propiedades:
          print(sPadre, p, o)
  sc = g.triples((None, RDFS.subClassOf, objeto))
  if sc is not None:
    for sHijo, pHijo, oHijo in sc:
      individuosYPropiedades(sHijo)

individuosYPropiedades(NS.Person)


print("7.3 SPARQL: ")
q3 = prepareQuery('''
  SELECT ?X ?p ?o WHERE {
    ?Subclase rdfs:subClassOf* ns:Person. 
    ?X rdf:type ?Subclase.
    ?X ?p ?o.
  }
  ''',
  initNs = {"rdf": RDF, "ns": NS, "vcard": VCARD}
)

for r in g.query(q3):
  print(r.X, r. p, r.o)
print("FIN 7.3")

