# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OqSG5GBfs1jJvFTF380Z3kez9dkDEQG-

**Task 07: Querying RDF(s)**
"""

!pip install rdflib 
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2022-2023/master/Assignment4/course_materials"

"""Leemos el fichero RDF de la forma que lo hemos venido haciendo"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
from rdflib.plugins.sparql import prepareQuery
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage+"/rdf/example6.rdf", format="xml")

"""**TASK 7.1: List all subclasses of "Person" with RDFLib and SPARQL**"""

# TO DO
ns = Namespace("http://somewhere#")
VCARD = Namespace("http://www.w3.org/2001/vcard-rdf/3.0#")

# RDFlib:
subclass_of_person = []   # Create an empty list where store requested data
print("Results RDFlib:")
print("")
for s, p, o in g.triples((None, RDFS.subClassOf, ns.Person)): # Accomplish this
    print(s)
    subclass_of_person += [s]   # Adding them to empty list given

# SPARQL:
print("")
print("Results SPARQL:")
print("")
query1 = prepareQuery('''
  SELECT ?Subclass WHERE { 
    ?Subclass RDFS:subClassOf ns:Person.  
  }
  ''',
                  initNs={"RDFS": RDFS, "ns": ns}
                  )

# Visualize the results
for r in g.query(query1):
    print(r.Subclass)

"""**TASK 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)**

"""

# TO DO

# RDFlib:
personas = []  # Create an empty list where store requested data.
print("Results RDFlib:")
print("")
for s, p, o in g.triples((None, RDF.type, ns.Person)):  # Individuals who belong to class Person.
    personas += [s]
    print(s)
for subclass in subclass_of_person:
    for s1, p1, o1 in g.triples((None, RDF.type, subclass)): # Individuals who belong to sublcass Person.
        print(s1)
        personas += [s1]

# SPARQL:
print("")
# Individuals who belong to class Person.
query2 = prepareQuery('''
  SELECT DISTINCT ?People WHERE { 
    ?People RDF:type ns:Person.
  }
  ''',
                  initNs={"ns": ns, "RDF": RDF}
                  )
# Individuals who belong to sublcass Person.
query3 = prepareQuery('''
  SELECT DISTINCT ?People WHERE { 
    ?Subclass RDFS:subClassOf ns:Person.
    ?People RDF:type ?Subclass
  }
  ''',
                  initNs={"RDFS": RDFS, "ns": ns, "RDF": RDF}
                  )

# Visualize the results
print("Results SPARQL:")
print("")
for r in g.query(query2):
    print(r.People)
for r in g.query(query3):
    print(r.People)

"""**TASK 7.3: List all individuals of "Person" and all their properties including their class with RDFLib and SPARQL**

"""

# TO DO

# With RDFlib:
print("Results RDFlib:")
print("")
for person in personas:
    print("Person:", person, "------->")
    for s, p, o in g.triples((person, None, None)):
        print(p, o)
    print("")

# With SPARQL:
# Individuals who belong to class Person and their properties.
query4 = prepareQuery('''
  SELECT DISTINCT ?People ?Property ?Object WHERE { 
    ?People  RDF:type ns:Person.
    ?People  ?Property ?Object
  }
  ''',
                  initNs={"ns": ns, "RDF": RDF}
                  )

# Individuals who belong to sublcass Person and their properties.
query5 = prepareQuery('''
  SELECT DISTINCT ?People ?Property ?Object WHERE { 
    ?Subclass RDFS:subClassOf ns:Person.
    ?People  RDF:type ?Subclass.
    ?People  ?Property ?Object.
  }
  ''',
                  initNs={"RDFS": RDFS, "ns": ns, "RDF": RDF}
                  )

# Visualize the results
print("")
print("Results SPARQL:")
print("")
for person in personas:
    print("Person:", person, "------->")
    for r in g.query(query4):
        if r.People  == person:
            print(r.Property, r.Object)
    for r in g.query(query5):
        if r.People  == person:
            print(r.Property, r.Object)
    print("")