# -*- coding: utf-8 -*-
"""Copia de Task07.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sV3zbtAGxJ2SYJrRYOpePIxdWEm_eHwv

**Task 07: Querying RDF(s)**
"""

# !pip install rdflib
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2021-2022/master/Assignment4/course_materials"

"""Leemos el fichero RDF de la forma que lo hemos venido haciendo"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage+"/rdf/example6.rdf", format="xml")
print("\n")

"""**TASK 7.1: List all subclasses of "Person" with RDFLib and SPARQL**"""

# SPARQL
from rdflib.plugins.sparql import prepareQuery

print("SPARQL")
q1 = prepareQuery('''
  SELECT DISTINCT ?Subject WHERE { 
    ?Subject rdfs:subClassOf <http://somewhere#Person>. 
  }
  ''',
  initNs = { "rdfs": RDFS}
)

for r in g.query(q1):
  print(r.Subject)
print("\n")

#RDFLIB
print("RDFLIB")
NS = Namespace("http://somewhere#")
for s,p,o in g.triples((None, RDFS.subClassOf, NS.Person)):
  print(s)
print("\n")

"""**TASK 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)**

"""

# TO DO
print("SPARQL")
q2 = prepareQuery('''
  SELECT DISTINCT ?Subject WHERE { 
    ?Subject rdf:type <http://somewhere#Person>. 
  }
  ''',
  initNs = { "rdf": RDF}
)

for r in g.query(q2):
  print(r.Subject)
print("\n")

# RDFLIB
print("RDFLIB")
NS = Namespace("http://somewhere#")
for s,p,o in g.triples((None, RDF.type, NS.Person)):
  print(s)
print("\n")

"""**TASK 7.3: List all individuals of "Person" and all their properties including their class with RDFLib and SPARQL**

"""

# SPARQL
print("SPARQL")
q3 = prepareQuery('''
  SELECT DISTINCT ?Subject ?Property ?Class WHERE { 
    ?Subject rdf:type <http://somewhere#Person>. 
    ?Subject ?Property ?Object.
    ?Property rdf:type ?Class
  }
  ''',
  initNs = { "rdf":RDF}
)

for r in g.query(q3):
  print(r.Subject, r.Property, r.Class)
print("\n")

# RDFLIB
print("RDFLIB")
NS = Namespace("http://somewhere#")
individuals = g.triples((None, RDF.type, NS.Person))
for s,p,o in individuals:
  for s1,p1,o1 in g.triples((s, None, None)):
    for s2,p2,o2 in g.triples((p1, RDF.type, None)):
      print(s, p1, o2)
print("\n")